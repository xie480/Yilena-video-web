<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yilena.service.dao.ChatMessageMapper">

    <insert id="addMessage">
        insert into chat_message(id,content,send_user_id,receive_user_id,type,status,
                                 created_time,visibility_by_sender,visibility_by_receiver,image_url,is_expired)
        values(#{id},#{content},#{sendUserId},#{receiveUserId},#{type},#{status},#{createdTime},
                #{visibilityBySender},#{visibilityByReceiver},#{imageUrl},#{isExpired})
    </insert>
    <update id="markMessagesAsRead">
        update chat_message
        set status = 1
        where send_user_id = #{sendUserId} and receive_user_id = #{receiveUserId}
    </update>
    <update id="updateStatusBatch">
        update chat_message
        set status = 1
        where id in
        <foreach collection="messageIds" item="messageId" open="(" separator="," close=")">
            #{messageId}
        </foreach>
    </update>
    <update id="updateMessageById">
        update chat_message
        <set>
            <if test="visibilityBySender != null">
                visibility_by_sender = #{visibilityBySender},
            </if>
            <if test="visibilityByReceiver != null">
                visibility_by_receiver = #{visibilityByReceiver},
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateExpiredStatus">
        update chat_message
        set is_expired = 1
       where created_time &lt; DATE_SUB(NOW(), INTERVAL 1 DAY)
        and receive_user_id = #{receiveUserId} and send_user_id = #{sendUserId}
    </update>
    <delete id="deleteMessage">
        delete from chat_message
        where id = #{id}
    </delete>
    <delete id="deleteMessageHalfYearsAgo">
        delete from chat_message
        where created_time &lt; DATE_SUB(NOW(), INTERVAL 6 MONTH)
    </delete>
    <select id="getMessageByPair" resultType="com.yilena.service.entity.po.ChatMessage">
        select id, content, send_user_id as sendUserId, receive_user_id as receiveUserId,
               type, status, created_time as createdTime,visibility_by_sender as visibilityBySender,
               visibility_by_receiver as visibilityByReceiver,image_url as imageUrl,is_expired as isExpired
        from chat_message
        where ((send_user_id = #{sendUserId} and receive_user_id = #{receiveUserId})
        or (send_user_id = #{receiveUserId} and receive_user_id = #{sendUserId})) and (type = 1 or type = 2 or type = 8)
        order by created_time desc
    </select>
    <select id="getMessageById" resultType="com.yilena.service.entity.po.ChatMessage">
        select id, content, send_user_id as sendUserId, receive_user_id as receiveUserId,
               type, status, created_time as createdTime, visibility_by_sender as visibilityBySender,
               visibility_by_receiver as visibilityByReceiver,image_url as imageUrl,is_expired as isExpired
        from chat_message
        where id = #{id}
    </select>
    <select id="getMessageWhichUnReadAndIsExpired" resultType="java.lang.Long">
        select count(id)
        from chat_message
        where receive_user_id = #{receiveUserId} and send_user_id = #{sendUserId} and status = 0 and is_expired = 1
    </select>
    <select id="getAnswerMe" resultType="com.yilena.service.entity.vo.MessageShowVO">
        select id, content, send_user_id as sendUserId, receive_user_id as receiveUserId,
               type, created_time as createdTime,image_url as imageUrl
        from chat_message
        where receive_user_id = #{userId} and type = 5 and send_user_id != #{userId}
        order by created_time desc
    </select>
    <select id="getAtMe" resultType="com.yilena.service.entity.vo.MessageShowVO">
        select id, content, send_user_id as sendUserId, receive_user_id as receiveUserId,
               type, created_time as createdTime,image_url as imageUrl
        from chat_message
        where receive_user_id = #{userId} and type = 9 and send_user_id != #{userId}
        order by created_time desc
    </select>
    <select id="getLikeMe" resultType="com.yilena.service.entity.vo.MessageShowVO">
        select id, content, send_user_id as sendUserId, receive_user_id as receiveUserId,
               type, created_time as createdTime,image_url as imageUrl
        from chat_message
        where receive_user_id = #{userId} and type = 3 and send_user_id != #{userId}
        order by created_time desc
    </select>
    <select id="getSystemMessage" resultType="com.yilena.service.entity.vo.MessageShowVO">
        select id, content, send_user_id as sendUserId, receive_user_id as receiveUserId,
               type, created_time as createdTime,image_url as imageUrl
        from chat_message
        where receive_user_id = #{userId} and type = 6 and send_user_id != #{userId}
        order by created_time desc
    </select>
    <select id="getOtherMessage" resultType="com.yilena.service.entity.vo.MessageShowVO">
        select id, content, send_user_id as sendUserId, receive_user_id as receiveUserId,
               type, created_time as createdTime,image_url as imageUrl
        from chat_message
        where receive_user_id = #{userId} and (type = 4 or type = 7) and send_user_id != #{userId}
        order by created_time desc
    </select>
</mapper>
