<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yilena.service.dao.CommentMapper">

    <insert id="addComment">
        insert into comment (id,entity_type, entity_id, user_id, content, image_url, comments)
        values (#{id},#{entityType},#{entityId},#{userId},#{content},#{imageUrl},#{comments})
    </insert>
    <update id="updateComment">
        update comment
        <set>
            <if test="entityId != null">
                entity_id = #{entityId},
            </if>
            <if test="content != null">
                content = #{content},
            </if>
            <if test="imageUrl != null">
                image_url = #{imageUrl},
            </if>
            <if test="comments != null">
                comments = #{comments},
            </if>
            <if test="likes != null">
                likes = #{likes},
            </if>
            <if test="updatedTime != null">
                updated_time = #{updatedTime},
            </if>
        </set>
        where id = #{id}
    </update>
    <delete id="deleteComment">
        delete from comment where id = #{id}
    </delete>
    <delete id="deleteCommentByIds">
        delete from comment where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <select id="getCommentById" resultType="com.yilena.service.entity.po.Comment">
        select id, entity_type as entityType, entity_id as entityId, user_id as userId,
               content, image_url as imageUrl, likes, comments,
               created_time as createdTime, updated_time as updatedTime
        from comment
        where id = #{id}
    </select>
    <select id="getCommentByHot" resultType="com.yilena.service.entity.vo.CommentVO">
        select id, entity_type as entityType, entity_id as entityId, user_id as userId,
               content, image_url as imageUrl, likes, comments,
               created_time as createdTime, updated_time as updatedTime
        from comment
        where entity_id = #{entityId} and entity_type = #{entityType}
        order by likes desc
    </select>
    <select id="getCommentByNew" resultType="com.yilena.service.entity.vo.CommentVO">
        select id, entity_type as entityType, entity_id as entityId, user_id as userId,
               content, image_url as imageUrl, likes, comments,
               created_time as createdTime, updated_time as updatedTime
        from comment
        where entity_id = #{entityId} and entity_type = #{entityType}
        order by created_time desc
    </select>
    <select id="getCommentByLastId" resultType="com.yilena.service.entity.po.Comment">
        select id, entity_type as entityType, entity_id as entityId, user_id as userId,
               content, image_url as imageUrl, likes, comments,
               created_time as createdTime, updated_time as updatedTime
        from comment
        where entity_id = #{lastId}
    </select>
    <select id="getCommentByLastIdAndUserId" resultType="com.yilena.service.entity.po.Comment">
        select id, entity_type as entityType, entity_id as entityId, user_id as userId,
               content, image_url as imageUrl, likes, comments,
               created_time as createdTime, updated_time as updatedTime
        from comment
        where entity_id = #{lastId} and user_id = #{userId}
    </select>

    <select id="getCommentsQueryByNewSortType" resultType="com.yilena.service.entity.po.Comment">
        select id, entity_type as entityType, entity_id as entityId, user_id as userId,
               content, image_url as imageUrl, likes,
               comments, created_time as createdTime, updated_time as updatedTime
        from comment
        <where>
            entity_type = 1 and entity_id in
            <foreach collection="videoIds" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
        </where>
        order by created_time desc
    </select>
    <select id="getCommentsQueryByLikeSortType" resultType="com.yilena.service.entity.po.Comment">
        select id, entity_type as entityType, entity_id as entityId, user_id as userId,
        content, image_url as imageUrl, likes,
        comments, created_time as createdTime, updated_time as updatedTime
        from comment
        <where>
            entity_type = 1 and entity_id in
            <foreach collection="videoIds" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
        </where>
       order by likes desc
    </select>
    <select id="getCommentsQueryByMostCommentsSortType" resultType="com.yilena.service.entity.po.Comment">
        select id, entity_type as entityType, entity_id as entityId, user_id as userId,
        content, image_url as imageUrl, likes,
        comments, created_time as createdTime, updated_time as updatedTime
        from comment
        <where>
            entity_type = 1 and entity_id in
            <foreach collection="videoIds" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
        </where>
        order by comments desc
    </select>
    <select id="getCommentByIds" resultType="com.yilena.service.entity.po.Comment">
        select entity_id as entityId
        from comment
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <select id="getTotalComment" resultType="java.lang.Long">
        select count(id) from comment
    </select>
</mapper>
