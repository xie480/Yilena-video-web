<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yilena.service.dao.VideoPendingMapper">
    <update id="updateVideoPending">
        update video_pending
        <set>
            <if test="title != null">
                title = #{title},
            </if>
            <if test="description != null">
                description = #{description},
            </if>
            <if test="videoUrl != null">
                video_url = #{videoUrl},
            </if>
            <if test="coverUrl != null">
                cover_url = #{coverUrl},
            </if>
            <if test="tags != null">
                tags = #{tagsJson},
            </if>
            <if test="comments != null">
                comments = #{comments},
            </if>
            <if test="time != null">
                time = #{time},
            </if>
            <if test="collectionId != null">
                collection_id = #{collectionId},
            </if>
            <if test="visibility != null">
                visibility = #{visibility},
            </if>
            <if test="sort != null">
                sort = #{sort},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="reason != null">
                reason = #{reason},
            </if>
        </set>
        where id = #{id}
    </update>
    <delete id="deleteVideoPending">
        delete
        from video_pending
        where id = #{id}
    </delete>
    <select id="getVideoPendingByPage" resultType="com.yilena.service.entity.po.VideoPending">
        select vp.id, title, vp.description,
                video_url as videoUrl, cover_url as coverUrl,sort,
                tags as tagsJson, barrages, views, likes, favorites, shares, vp.coins,
                comments, time, user_id as userId, collection_id as collectionId,
                visibility, vp.created_time as createdTime, vp.updated_time as updatedTime,last_id as lastId, vp.status,vp.reason,username
        from video_pending vp
        join user u
        on vp.user_id = u.id
        <where>
            <if test="title != null and title != '' ">
                and title = #{title}
            </if>
            <if test="beginTime != null">
                and vp.created_time >= #{beginTime}
            </if>
            <if test="endTime != null">
                and vp.created_time &lt;= #{endTime}
            </if>
            <if  test="status != null">
                and vp.status = #{status}
            </if>
        </where>
        order by vp.updated_time desc
    </select>
    <select id="getVideoPendingById" resultType="com.yilena.service.entity.po.VideoPending">
        select id, title, description,
               video_url as videoUrl, cover_url as coverUrl,sort,
                tags as tagsJson, barrages, views, likes, favorites, shares, coins,
                comments, time, user_id as userId, collection_id as collectionId,
                visibility, created_time as createdTime, updated_time as updatedTime,last_id as lastId, status,reason
        from video_pending
        where id = #{id}
    </select>
    <select id="getVideoPendingByStatus" resultType="com.yilena.service.entity.po.VideoPending">
        select id, title, description,
               video_url as videoUrl, cover_url as coverUrl,sort,
                tags as tagsJson, barrages, views, likes, favorites, shares, coins,
                comments, time, user_id as userId, collection_id as collectionId,
                visibility, created_time as createdTime, updated_time as updatedTime,last_id as lastId,status,reason
        from video_pending
        where user_id = #{userId} and status = #{status}
        order by updated_time desc
    </select>
    <select id="getVideoCountByStatus" resultType="java.lang.Long">
        select count(*) from video_pending where status = #{status}
    </select>

    <insert id="addVideoPending">
        insert into video_pending(id,title, description,barrages, video_url, cover_url, tags, views, likes,
                                  favorites, shares, coins, comments, user_id, collection_id, visibility,
                                  created_time, updated_time,sort,time,last_id,status)
        values(#{id},#{title}, #{description},#{barrages}, #{videoUrl}, #{coverUrl}, #{tagsJson}, #{views},
               #{likes}, #{favorites}, #{shares}, #{coins}, #{comments}, #{userId}, #{collectionId},
               #{visibility}, #{createdTime}, #{updatedTime},#{sort},#{time},#{lastId},2)
    </insert>
    <insert id="addVideoPendingWhichNoPass">
        insert into video_pending(id,title, description,barrages, video_url, cover_url, tags, views, likes,
                                  favorites, shares, coins, comments, user_id, collection_id, visibility,
                                  created_time, updated_time,sort,time,last_id,status,reason)
        values(#{id},#{title}, #{description},#{barrages}, #{videoUrl}, #{coverUrl}, #{tagsJson}, #{views},
               #{likes}, #{favorites}, #{shares}, #{coins}, #{comments}, #{userId}, #{collectionId},
               #{visibility}, #{createdTime}, #{updatedTime},#{sort},#{time},#{lastId},#{status},#{reason})
    </insert>
</mapper>
